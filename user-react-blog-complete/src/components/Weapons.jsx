import React from 'react'
import WeaponForm from './WeaponForm'
import WeaponList from './WeaponList'
import API from '../API'
import PropTypes from 'prop-types'

function ErrorMessage ({ message }) {
  return <div className='errorMessage'>{message}</div>
}

ErrorMessage.propTypes = {
  message: PropTypes.string.isRequired
}

export default function Weapons () {
  const [weaponList, setWeaponList] = React.useState([]);
  const [loadingMessage, setLoadingMessage] = React.useState('Loading...')
  const [errorMessage, setErrorMessage] = React.useState(null)

  const [formMode, setFormMode] = React.useState('new')

  const emptyWeapon = { armorType: '', armorName: '', protection: '' }
  const [currentWeapon, setCurrentWeapon] = React.useState(emptyWeapon)

  // Note:  The {} around API.fetchWeapons are important so that the block
  // passed to useEffect returns undefined (instead of the promise generated by fetch).
  React.useEffect(() => {
    API.fetchWeapons().then(data => {
      setWeaponList(data)
      setLoadingMessage(null)
    }).catch((message) => {
      setLoadingMessage('Unable to load weapons because ' + message)
    })
  }, []);

  const updateWeapon = (field, value) => {
    const newWeapon = { ...currentWeapon };
    newWeapon[field] = value;
    setCurrentWeapon(newWeapon)
  };

  const formSubmitted = () => {
    setErrorMessage(null);
    if (formMode === 'new') {
      API.postNewWeapon(currentWeapon).then(data => {
        console.log('Received data');
        console.log(data);
        if (data.id) {
          currentWeapon.id = data.id;
          setWeaponList([...weaponList, currentWeapon])
        } else {
          console.log("New weapon wasn't created.")
        }
      }).catch(message => setErrorMessage(`Failed to create new weapon: ${message}`))
    } else {
      API.updateWeapon(currentWeapon).then(() => {
        const newWeaponList = [...weaponList];
        const weaponIndex = weaponList.findIndex((weapon) => weapon.id === currentWeapon.id);

        newWeaponList[weaponIndex] = currentWeapon;
        setWeaponList(newWeaponList)
      }).catch(message => setErrorMessage(`Failed to update weapon: ${message}`))
    }
  };

  const editClicked = (weapon) => {
    setErrorMessage(null);
    setFormMode('updateArmor');
    setCurrentWeapon(weapon)
  };

  const cancelClicked = () => {
    setErrorMessage(null);
    setFormMode('new');
    setCurrentWeapon(emptyWeapon)
  };

  const deleteClicked = (id) => {
    API.deleteWeapon(id).then(() => {
      setWeaponList(weaponList.filter((item) => item.id !== id));
      cancelClicked()
    }).catch(message => setErrorMessage(`Failed to delete weapon: ${message}`))
  }

  const errorBlock = errorMessage ? <ErrorMessage message={errorMessage} /> : null

  return (
    <div className="weapons">
      {errorBlock}
      <WeaponForm formMode={formMode} weapon={currentWeapon} updateWeapon={updateWeapon}
                  submitCallback={formSubmitted} cancelCallback={cancelClicked} />
      <div />
      {loadingMessage
        ? <p>{loadingMessage}</p>
        : <WeaponList weapons={weaponList} onEditClicked={editClicked} onDeleteClicked={deleteClicked} />
      }
    </div>
  )
}
